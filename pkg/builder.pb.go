// Code generated by protoc-gen-go.
// source: pkg/builder.proto
// DO NOT EDIT!

/*
Package via is a generated protocol buffer package.

It is generated from these files:
	pkg/builder.proto

It has these top-level messages:
	BuildLine
	BuildRequest
	BuildReply
*/
package via

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildLine struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *BuildLine) Reset()                    { *m = BuildLine{} }
func (m *BuildLine) String() string            { return proto.CompactTextString(m) }
func (*BuildLine) ProtoMessage()               {}
func (*BuildLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BuildRequest struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Clean bool   `protobuf:"varint,2,opt,name=clean" json:"clean,omitempty"`
}

func (m *BuildRequest) Reset()                    { *m = BuildRequest{} }
func (m *BuildRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()               {}
func (*BuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BuildReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *BuildReply) Reset()                    { *m = BuildReply{} }
func (m *BuildReply) String() string            { return proto.CompactTextString(m) }
func (*BuildReply) ProtoMessage()               {}
func (*BuildReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*BuildLine)(nil), "via.BuildLine")
	proto.RegisterType((*BuildRequest)(nil), "via.BuildRequest")
	proto.RegisterType((*BuildReply)(nil), "via.BuildReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Builder service

type BuilderClient interface {
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildReply, error)
	BuildStream(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Builder_BuildStreamClient, error)
}

type builderClient struct {
	cc *grpc.ClientConn
}

func NewBuilderClient(cc *grpc.ClientConn) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildReply, error) {
	out := new(BuildReply)
	err := grpc.Invoke(ctx, "/via.Builder/Build", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) BuildStream(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Builder_BuildStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Builder_serviceDesc.Streams[0], c.cc, "/via.Builder/BuildStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &builderBuildStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Builder_BuildStreamClient interface {
	Recv() (*BuildLine, error)
	grpc.ClientStream
}

type builderBuildStreamClient struct {
	grpc.ClientStream
}

func (x *builderBuildStreamClient) Recv() (*BuildLine, error) {
	m := new(BuildLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Builder service

type BuilderServer interface {
	Build(context.Context, *BuildRequest) (*BuildReply, error)
	BuildStream(*BuildRequest, Builder_BuildStreamServer) error
}

func RegisterBuilderServer(s *grpc.Server, srv BuilderServer) {
	s.RegisterService(&_Builder_serviceDesc, srv)
}

func _Builder_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/via.Builder/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Build(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_BuildStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuilderServer).BuildStream(m, &builderBuildStreamServer{stream})
}

type Builder_BuildStreamServer interface {
	Send(*BuildLine) error
	grpc.ServerStream
}

type builderBuildStreamServer struct {
	grpc.ServerStream
}

func (x *builderBuildStreamServer) Send(m *BuildLine) error {
	return x.ServerStream.SendMsg(m)
}

var _Builder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "via.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Build",
			Handler:    _Builder_Build_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuildStream",
			Handler:       _Builder_BuildStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("pkg/builder.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xc8, 0x4e, 0xd7,
	0x4f, 0x2a, 0xcd, 0xcc, 0x49, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e,
	0xcb, 0x4c, 0x54, 0x52, 0xe5, 0xe2, 0x74, 0x02, 0x89, 0xfa, 0x64, 0xe6, 0xa5, 0x0a, 0x49, 0x70,
	0xb1, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1,
	0xb8, 0x4a, 0x16, 0x5c, 0x3c, 0x60, 0x65, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42,
	0x5c, 0x2c, 0x79, 0x89, 0xb9, 0x30, 0x65, 0x60, 0xb6, 0x90, 0x08, 0x17, 0x6b, 0x72, 0x4e, 0x6a,
	0x62, 0x9e, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x84, 0xa3, 0xa4, 0xc6, 0xc5, 0x05, 0xd5,
	0x59, 0x90, 0x53, 0x89, 0xdb, 0x06, 0xa3, 0x3c, 0x2e, 0x76, 0x27, 0x88, 0xf3, 0x84, 0x74, 0xb9,
	0x58, 0xc1, 0x4c, 0x21, 0x41, 0xbd, 0xb2, 0xcc, 0x44, 0x3d, 0x64, 0x8b, 0xa5, 0xf8, 0x91, 0x85,
	0x0a, 0x72, 0x2a, 0x95, 0x18, 0x84, 0x4c, 0xb8, 0xb8, 0xc1, 0xfc, 0xe0, 0x92, 0xa2, 0xd4, 0xc4,
	0x5c, 0x6c, 0x9a, 0xf8, 0x10, 0x42, 0x20, 0x7f, 0x2a, 0x31, 0x18, 0x30, 0x26, 0xb1, 0x81, 0x03,
	0xc1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x73, 0x3c, 0xdf, 0x19, 0x01, 0x00, 0x00,
}
