#!/bin/sh 

if [ -n "$DEBUG" ]; then
    set -x
fi

set -e
set +h
set -o nounset 

pwd=$PWD
user=$USER
term=$TERM
unset `env | awk -F= '/^\w/ {print $1}' | xargs`


export TARCH="i686"

export PWD=$pwd
export USER=$user
export TERM=$term

export CLFS=/mnt/clfs
export TOOLS=/tools
export CROSS_TOOLS=/cross-tools
export PATH=/usr/lib/ccache/bin:$CROSS_TOOLS/bin:/bin:/usr/bin
export CLFS_HOST=$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')
export CLFS_TARGET="${TARCH}-pc-linux-gnu"

cache=$PWD/cache
plans=$PWD/plans
builds=$cache/builds
sources=$cache/sources
stages=$cache/stages
logs=$PWD/logs
log=$PWD/logs/bootstrap.log

GNU_MIRROR="http://mirrors.kernel.org/gnu"

create() {
	for d in $logs $builds $sources $stages ; do
		if [ ! -d $d ]; then
			log $FUNCNAME $d
			mkdir -p $d
		fi
	done
}

log() {
	local action=$1
	local details=$2
    local blue=$(tput setaf 4)
    local reset=$(tput sgr0)
    printf "${blue}bootstrap: ${reset}%-20.20s %s\n" "$action" "$details"
}

download() {
	local url=$1
	local file=$(basename $url)
	_pushd $sources
	if [ ! -f $file ]; then
		log $FUNCNAME $url
		curl -f -L -# -O $url
	fi	
	_popd
}

stage() {
	local file=$(basename $1)
	local name=$2
	local version=$3

	log $FUNCNAME $name-$version
	_pushd $stages
		if [ ! -d $name-$version ]; then
			log decompressing $name-$version
			tar xf $sources/$file
		fi
	_popd

	if [ "${4:-NIL}" != "NIL" ]; then
		log "copying" "not a gnu_build"
		cp -a $stages/$name-$version $builds
	else
		mkdir $builds/$name-$version || true
	fi
}

_pushd() {
    builtin pushd "$@" > /dev/null
}

_popd() {
    builtin popd &> /dev/null
}

linux_api_headers() {
	log $FUNCNAME started
	local name=linux
	local version=3.0
	local url="http://www.kernel.org/pub/linux/kernel/v3.0/$name-$version.tar.bz2"
	download $url
	stage "$url" "$name" "$version" "true"
	_pushd $builds/$name-$version
		install -dv $TOOLS/include
		make mrproper
		# FIXME: do not hardcode arch
		make ARCH=i386 headers_check
		make ARCH=i386 INSTALL_HDR_PATH=dest headers_install
		cp -rv dest/include/* $TOOLS/include
	_popd
	log $FUNCNAME finished
}

file_build() {
	log $FUNCNAME started
	local name=file
	local version=5.07
	local url="ftp://ftp.astron.com/pub/file/$name-$version.tar.gz"
	download $url
	stage "$url" "$name" "$version"
	_pushd $builds/$name-$version
		$stages/$name-$version/configure --prefix=$CROSS_TOOLS
		make
		make install
	_popd
	log $FUNCNAME finished
}

m4_build() {
	log $FUNCNAME started
	local name=m4
	local version=1.4.16
	local url=$GNU_MIRROR/$name/$name-$version.tar.gz
	download $url
	stage "$url" "$name" "$version"
	_pushd $builds/$name-$version
		$stages/$name-$version/configure --prefix=$CROSS_TOOLS
		make
		make install
	_popd
	log $FUNCNAME finished
}

ncurses() {
	log $FUNCNAME started
	local name=ncurses
	local version=5.9
	local url=$GNU_MIRROR/$name/$name-$version.tar.gz
	download $url
	download http://patches.cross-lfs.org/dev/ncurses-5.9-bash_fix-1.patch
	stage "$url" "$name" "$version"
	_pushd $stages/$name-$version
		patch -Np1 -i $sources/ncurses-5.9-bash_fix-1.patch
	_popd
	_pushd $builds/$name-$version
		$stages/$name-$version/configure --prefix=$CROSS_TOOLS \
			--without-debug --without-shared

		make -C include
		make -C progs tic
		install -v -m755 progs/tic $CROSS_TOOLS/bin
	_popd
	log $FUNCNAME finished
}

gmp() {
	log $FUNCNAME started
	local name=gmp
	local version=5.0.2
	local url=$GNU_MIRROR/$name/$name-$version.tar.gz
	download $url
	stage "$url" "$name" "$version"
	_pushd $builds/$name-$version
		CPPFLAGS=-fexceptions $stages/$name-$version/configure \
			--prefix=$CROSS_TOOLS \
			--enable-cxx
		make
		make install
	_popd
	log $FUNCNAME finished
}

mpfr() {
	log $FUNCNAME started
	local name=mpfr
	local version=3.0.1
	local url=$GNU_MIRROR/$name/$name-$version.tar.gz
	download $url
	stage "$url" "$name" "$version"
	_pushd $builds/$name-$version
	LDFLAGS="-Wl,-rpath,$CROSS_TOOLS/lib" \
		$stages/$name-$version/configure \
		--prefix=$CROSS_TOOLS \
		--enable-shared \
		--with-gmp=$CROSS_TOOLS
		make
		make install
	_popd
	log $FUNCNAME finished
}

mpc() {
	log $FUNCNAME started
	local name=mpc
	local version=0.9
	local url="http://www.multiprecision.org/mpc/download/mpc-$version.tar.gz"
	download $url
	stage "$url" "$name" "$version"
	_pushd $builds/$name-$version
	LDFLAGS="-Wl,-rpath,$CROSS_TOOLS/lib" \
		$stages/$name-$version/configure --prefix=$CROSS_TOOLS \
		--with-gmp=$CROSS_TOOLS \
		--with-mpfr=$CROSS_TOOLS
	make
	make install
	_popd
	log $FUNCNAME finished
}

ppl() {
	log $FUNCNAME started
	local name=ppl
	local version=0.11.2
	local url=http://www.cs.unipr.it/ppl/Download/ftp/releases/$version/ppl-$version.tar.bz2
	download $url
	stage "$url" "$name" "$version"
	_pushd $builds/$name-$version
	CPPFLAGS="-I$CROSS_TOOLS/include" \
		LDFLAGS="-Wl,-rpath,$CROSS_TOOLS/lib" \
		$stages/$name-$version/configure --prefix=$CROSS_TOOLS \
		--enable-shared \
		--enable-interfaces="c,cxx" \
		--disable-optimization \
		--with-libgmp-prefix=$CROSS_TOOLS \
		--with-libgmpxx-prefix=$CROSS_TOOLS
		make
		make install
	_popd
	log $FUNCNAME finished
}

cloog_ppl() {
	log $FUNCNAME started
	local name=cloog-ppl
	local version=0.15.11
	local url=ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-ppl-$version.tar.gz
	download $url
	stage "$url" "$name" "$version"

	_pushd $stages/$name-$version
		cp -v configure{,.orig}
		sed -e "/LD_LIBRARY_PATH=/d" \
			configure.orig > configure
	_popd

	_pushd $builds/$name-$version
		LDFLAGS="-Wl,-rpath,$CROSS_TOOLS/lib" \
			$stages/$name-$version/configure \
			--prefix=$CROSS_TOOLS \
			--enable-shared \
			--with-bits=gmp \
			--with-gmp=$CROSS_TOOLS \
			--with-ppl=$CROSS_TOOLS
		make 
		make install
	_popd

	log $FUNCNAME finished
}

cross_binutils() {
	log $FUNCNAME started
	local name=binutils
	local version=2.21
	local url=$GNU_MIRROR/$name/$name-$version.tar.gz
	download $url
	stage "$url" "$name" "$version"
	_pushd $builds/$name-$version
	AR=ar AS=as \
		$stages/$name-$version/configure \
		--prefix=$CROSS_TOOLS \
		--host=${CLFS_HOST} \
		--target=${CLFS_TARGET} \
		--with-sysroot=$CLFS \
		--with-lib-path=$TOOLS/lib \
		--disable-nls  \
		--enable-shared \
		--disable-multilib

	make configure-host
	make
	make install
	cp -v $stages/$name-$version/include/libiberty.h /tools/include
	_popd
	log $FUNCNAME finished
}

cross_gcc() {
	log $FUNCNAME started
	local name=gcc
	local version=4.6.0
	local url=$GNU_MIRROR/$name/$name-$version/$name-$version.tar.bz2
	local patch_url=http://patches.cross-lfs.org/dev/gcc-4.6.0-branch_update-1.patch
	local patch_url=http://patches.cross-lfs.org/dev/gcc-4.6.0-specs-1.patch

	download $url
	download http://patches.cross-lfs.org/dev/gcc-4.6.0-branch_update-1.patch
	download http://patches.cross-lfs.org/dev/gcc-4.6.0-specs-1.patch
	if [ -d $stages/$name-$version ]; then
		rm -r $stages/$name-$version
	fi
	stage "$url" "$name" "$version"
	_pushd $stages/$name-$version
		patch -Np1 -i $sources/gcc-4.6.0-branch_update-1.patch
		patch -Np1 -i $sources/gcc-4.6.0-specs-1.patch

		echo -en '#undef STANDARD_INCLUDE_DIR\n#define STANDARD_INCLUDE_DIR "/tools/include/"\n\n' >> gcc/config/linux.h
		echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' >> gcc/config/linux.h
		echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/linux.h

		cp -v gcc/Makefile.in{,.orig}
		sed -e "s@\(^CROSS_SYSTEM_HEADER_DIR =\).*@\1 /tools/include@g" \
			gcc/Makefile.in.orig > gcc/Makefile.in

		touch /tools/include/limits.h
	_popd

	_pushd $builds/$name-$version
	AR=ar LDFLAGS="-Wl,-rpath,$CROSS_TOOLS/lib" \
		$stages/$name-$version/configure --prefix=$CROSS_TOOLS \
		--build=${CLFS_HOST} --host=${CLFS_HOST} --target=${CLFS_TARGET} \
		--with-sysroot=$CLFS --with-local-prefix=$TOOLS --disable-nls \
		--disable-shared --with-mpfr=$CROSS_TOOLS --with-gmp=$CROSS_TOOLS \
		--with-ppl=$CROSS_TOOLS --with-cloog=$CROSS_TOOLS \
		--without-headers --with-newlib --disable-decimal-float \
		--disable-libgomp --disable-libmudflap --disable-libssp \
		--disable-threads --enable-languages=c --disable-multilib

		make all-gcc all-target-libgcc
		make install-gcc install-target-libgcc
	_popd

	log $FUNCNAME finished
}

eglibc() {
	log $FUNCNAME started
	local name=eglibc
	local version=2.13
	local url=http://cross-lfs.org/files/packages/git/eglibc-$version-r13356.tar.bz2
	download $url

	stage "$url" "$name" "$version"

	_pushd $stages/$name-$version
		cp -v Makeconfig{,.orig}
			sed -e 's/-lgcc_eh//g' Makeconfig.orig > Makeconfig
	_popd

	_pushd $builds/$name-$version

cat > config.cache << "EOF"
libc_cv_forced_unwind=yes
libc_cv_c_cleanup=yes
libc_cv_gnu89_inline=yes
libc_cv_ssp=no
EOF

	BUILD_CC="gcc" CC="${CLFS_TARGET}-gcc" \
		AR="${CLFS_TARGET}-ar" RANLIB="${CLFS_TARGET}-ranlib" \
	CFLAGS="-march=$(cut -d- -f1 <<< $CLFS_TARGET) -mtune=generic -g -O2" \
	$stages/$name-$version/configure --prefix=$TOOLS \
	--host=${CLFS_TARGET} --build=${CLFS_HOST} \
	--disable-profile --enable-add-ons \
	--with-tls --enable-kernel=2.6.0 --with-__thread \
	--with-binutils=$CROSS_TOOLS/bin --with-headers=$TOOLS/include \
	--cache-file=config.cache
	make
	make install

	_popd

	log $FUNCNAME finished
}

cross_gcc_final() {
	log $FUNCNAME started
	local name=gcc
	local version=4.6.0
	local url=$GNU_MIRROR/$name/$name-$version/$name-$version.tar.bz2
	download $url

	download http://patches.cross-lfs.org/dev/gcc-4.6.0-branch_update-1.patch
	download http://patches.cross-lfs.org/dev/gcc-4.6.0-specs-1.patch

	if [ -d $stages/$name-$version ]; then
		rm -r $stages/$name-$version
	fi

	stage "$url" "$name" "$version"
	_pushd  $stages/$name-$version
		patch -Np1 -i $sources/gcc-4.6.0-branch_update-1.patch
		patch -Np1 -i $sources/gcc-4.6.0-specs-1.patch

		echo -en '#undef STANDARD_INCLUDE_DIR\n#define STANDARD_INCLUDE_DIR "/tools/include/"\n\n' >> gcc/config/linux.h
		echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"\n' >> gcc/config/linux.h
		echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/linux.h

		cp -v gcc/Makefile.in{,.orig}
		sed -e "s@\(^CROSS_SYSTEM_HEADER_DIR =\).*@\1 /tools/include@g" \
			gcc/Makefile.in.orig > gcc/Makefile.in
	_popd
	_pushd $builds/$name-$version
	AR=ar LDFLAGS="-Wl,-rpath,$CROSS_TOOLS/lib" \
		$stages/$name-$version/configure --prefix=$CROSS_TOOLS \
		--build=${CLFS_HOST} --target=${CLFS_TARGET} --host=${CLFS_HOST} \
		--with-sysroot=${CLFS} --with-local-prefix=$TOOLS --disable-nls \
		--enable-shared --enable-languages=c,c++ --enable-__cxa_atexit \
		--with-mpfr=$CROSS_TOOLS --with-gmp=/cross-tools --enable-c99 \
		--with-ppl=$CROSS_TOOLS --with-cloog=$CROSS_TOOLS \
		--enable-long-long --enable-threads=posix --disable-multilib

		make AS_FOR_TARGET="${CLFS_TARGET}-as" \
			LD_FOR_TARGET="${CLFS_TARGET}-ld"
		make install
	_popd
	log $FUNCNAME finished
}


create
#linux_api_headers
#file_build
#m4_build
#ncurses
#gmp
#mpfr
#mpc
#ppl
#cloog_ppl
#cross_binutils
#cross_gcc
#eglibc
cross_gcc_final
