#+TITLE TODO's

* TODO                                                                :devel:
** Toolchain
*** Cross building
    Currently we build all packages on there native hosts. But it would be easier
    if we could build for any target without using a virtual machine or bare
    metal install. This would make it so we could working out of one git
    repository and not have to run and manage virtual machine or ssh hosts.


**** Transition to cross compiling all builds

***** TODO create a linux x86_64 target compiler
      change our current compiler from a native gcc to a cross x86_64.
      this would not actually change our builds much. Just that we would
      effectively be cross building our x86_64 packages. this would lay the ground
      work for building other targets compilers without much work.

****** TODO Notes
       toolchain package names will change to their gnu triple.

******* x86_64-via-linux-gnu-gcc
******* x86_64-via-linux-gnu-binutils

***** TODO Create a second cross compiler targeting power8 as a test.

*** TODO Sandbox
    currently we are starting to build packages in a docker container. but this is
    not automated we need to manually spin up the container and then interactively
    build packages.

    we should have a simple mechanism to build package in a container.

*** Partially implemented
    Right now this is partially implement in that we can spin up a docker
    instance. And then build a package. There are some draw backs to this it
    needs refining and I think ultimately a RPC method might be better. Still
    thinking on this.

** Features not implimented
*** Interface to add and remove flags
    Right now we have alot of global flags, some actually have an effect on most
    packages. But in some case they can break a build, or we want to override a
    flag.

**** Potential solutions
***** RemoveFlag
      maybe we can just add a field that removes the flag from config.json this
      way we can turn on strict configure which would add strict flag
      enforcement.

***** config.site
      Another option is to use a config.site file and configure all of our flags
      there. This would allow us to set site wide defaults. And not break on
      flags package don't know. This is nice since it's more autotools aware.
      only handles autotools though.
*** TODO Provied mechanism to upgrade newer package

**** Syncing
     use git to sync the plans from remote to local

**** Upgrading
     check the Oid of the installed package and Oid in the plans repo
     if they are different this implies an up grade. so install the newer
     package

*** TODO Rework Test's
    Test should only handle input's and output's. Many of the test's right now
    simple invoke function's and test for go error's.

**** TODO Add test for long link
     on macos when building emacs archive packages fails when nextstep is enabled

*** TODO When packaging check PREFIX is honored
    We should check the sanity of PKGDIR.

    We only record files in our manifest not directories. so
    an empty directory can end up in our tarball. But not be listed in the
    manifest this means we could try to untar a directory outside of our PREFIX.

    We'll have to check the total entries in each of these directories
    - $PKGDIR
    - /usr
    - /usr/local

*** TODO Via initialization
    When we first run via, it is dependent on the plans git repo for meta data.
    currently we git clone recursive the via repo, which contains the plans repo
    as well. We also do not respect the user and just blindly clone it on first run.

**** TODO Create an init via function
     do not assume and fetch the plans repository. Error gracefully and suggest
     user to init the plans repo.

*** TODO Make it so package downloading/installing is not so incremental.
    We should predetermine what is going to be installed and what needs
    downloading before we actually do it. This allows us to batch download instead
    of sequentially downloading. It also gives us the option to present to the
    user what is going to happen, with a potential yes/no prompt

*** TODO Create static git
    git is our only dependency right now for installing packages.  create static
    git binary that we can host in docker with via.

*** TODO Rework the archive logic.

*** TODO Have plans replace alternative builds
    when installing packages that have provide the same program but with different
    features. There will be file path clashes. e.g emacs vs emacs-nox. We need to
    provide a replace mechanism. To remove emacs and to install emacs-nox.
** Refactor
   This are things that require refactoring existing features, or making them
   more complete.
