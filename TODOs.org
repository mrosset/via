#+TITLE TODO's

#+STARTUP: showall

* Refactor                                                            :devel:
  This are things that require refactoring existing features, or making them
  more complete.
** Depends fields
   Make the Depends field more descriptive. Right now all we have is Depends and
   ManDepends. ManDepends makes no sense. Possible ideas for field names are.

   see[[file:plans/core/bash.json::"ManDepends"%20:%20null,][ bash plan]]

**** ManualDepends
     These are plans that need to be manually specified to be installed.

**** AutoDepends
     These plans are autogenerated based on what libraries the plan links to.

**** BuildDepends
     These plans need to build installed during build time. But are not required
     for run time.
     These generally as a rule are runtimes, all development headers and libraries
     should be included in Plans if AutoDepends does not account for it.

*** TODO Linting fixes function.
    Create function that can handle hand one time conversion of json.

    If we need to rename a json field and struct field we will lose the current
    data contained in the json file when we serialize it. So we need to do a one
    time copy of the field to the new field. we can use the lint command to
    handle this and then just hook in a Fix function when we refactor something.

*** TODO Clean up the Dependency logic
    ManDepends was hacked in our logic and not well planed out. After
    refactoring the field names we should fix the logic that deals with them at
    build and install time.

* Features                                                            :devel:

** TODO Sandbox
   currently we are starting to build packages in a docker container. but this is 
   not automated we need to manually spin up the container and then interactively
   build packages.

   we should have a simple mechanism to build package in a container.

** TODO Rework Test's
   Test should only handle input's and output's. Many of the test's right now
   simple invoke function's and test for go error's.

*** TODO Add test for long link                                        
    on macos when building emacs archive packages fails when nextstep is enabled

** TODO When packaging check PREFIX is honored
   We should check the sanity of PKGDIR. 

   We only record files in our manifest not directories. so
   an empty directory can end up in our tarball. But not be listed in the
   manifest this means we could try to untar a directory outside of our PREFIX.

** We'll have to check the total entries in each of these directories
  - $PKGDIR
  - /usr
  - /usr/local
  
** TODO Via initialization
   When we first run via, it is dependent on the plans git repo for meta data.
   currently we git clone recursive the via repo, which contains the plans repo
   as well. We also do not respect the user and just blindly clone it on first run.

*** TODO Create an init via function
    do not assume and fetch the plans repository. Error gracefully and suggest
    user to init the plans repo. 

** TODO Make it so package downloading/installing is not so incremental.
   We should predetermine what is going to be installed and what needs
   downloading before we actually do it. This allows us to batch download instead
   of sequentially downloading. It also gives us the option to present to the
   user what is going to happen, with a potential yes/no prompt

** TODO Create static git
   git is our only dependency right now for installing packages.  create static
   git binary that we can host in docker with via.

** TODO Rework the archive logic.

** TODO Have plans replace alternative builds
   when installing packages that have provide the same program but with different
   features. There will be file path clashes. e.g emacs vs emacs-nox. We need to
   provide a replace mechanism. To remove emacs and to install emacs-nox.
