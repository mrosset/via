#    -*- mode: org -*-


Archived entries from file /home/strings/gocode/src/github.com/mrosset/via/TODOs.org


* DONE Branch binary download endpoints
  CLOSED: [2016-10-17 Mon 13:44]
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-10-17 Mon 14:23
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_CATEGORY: TODOs
  :ARCHIVE_TODO: DONE
  :END:
** Problem
   Currently we hard code the HTTP GET endpoints for the current plan branch
   the plan branches are designed target specific machines and OS configurations
   see [[file:plans/config.json::"Repo"%20:%20"$GOPATH/src/github.com/mrosset/via/publish/repo/master",][Repo]] 

   When we package our tarball we should publish into the right name space. For 
   example  the linux-x86_64 branch is the base branch so it's endpoint looks
   like this.

#+BEGIN_EXAMPLE
repo/linux-x86_64/file.tar.gz
#+END_EXAMPLE 

** Solution
  When building packages get the current plan branch and add it to the
  endpoint.

* Branches
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-10-20 Thu 18:33
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_CATEGORY: TODOs
  :END:
** DONE Don't ever hard code branches
   CLOSED: [2016-10-20 Thu 18:32]
   We should never hard code branches they should be explicitly set in 
   config.json
** DONE Check branch when building
   CLOSED: [2016-10-20 Thu 18:32]
   when building we should check that plans git branch that is checkedout 
   matches the configuration branch

* DONE Add OID to plan struct
  CLOSED: [2016-10-20 Thu 19:55]
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-10-20 Thu 19:55
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_CATEGORY: TODOs
  :ARCHIVE_TODO: DONE
  :END:
  We should sha256sum check tarballs. So we can reference the OID when
  downloading and installing. This will ensure packages in publish
  match the package in plan git repository.

  This gets tricky with the manifest in the tarball because there is no way
  to embed the OID into it. We'll have to update the manifest once the package is
  installed. The side benefit is we can then use OID to upgrade packages. And we 
  don't have to worry about package increments or version increments.

* DONE ManDepends only works for building. And support for Install as well.
  CLOSED: [2016-10-21 Fri 18:06]
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-10-21 Fri 18:06
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_OLPATH: Features
  :ARCHIVE_CATEGORY: TODOs
  :ARCHIVE_TODO: DONE
  :END:

* TODO Linting fixes function.
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-10-22 Sat 23:09
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_OLPATH: Refactor/Depends fields
  :ARCHIVE_CATEGORY: TODOs
  :ARCHIVE_TODO: TODO
  :ARCHIVE_ITAGS: devel
  :END:
  Create function that can handle hand one time conversion of json.

  If we need to rename a json field and struct field we will lose the current
  data contained in the json file when we serialize it. So we need to do a one
  time copy of the field to the new field. we can use the lint command to
  handle this and then just hook in a Fix function when we refactor something.


* TODO Clean up the Dependency logic
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-10-22 Sat 23:09
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_OLPATH: Refactor/Depends fields
  :ARCHIVE_CATEGORY: TODOs
  :ARCHIVE_TODO: TODO
  :ARCHIVE_ITAGS: devel
  :END:
  ManDepends was hacked in our logic and not well planed out. After
  refactoring the field names we should fix the logic that deals with them at
  build and install time.


* Depends fields
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-10-22 Sat 23:09
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_OLPATH: Refactor
  :ARCHIVE_CATEGORY: TODOs
  :ARCHIVE_ITAGS: devel
  :END:
  Make the Depends field more descriptive. Right now all we have is Depends and
  ManDepends. ManDepends makes no sense. Possible ideas for field names are.

  see[[file:plans/core/bash.json::"ManDepends"%20:%20null,][ bash plan]]

*** DONE ManualDepends
    CLOSED: [2016-10-22 Sat 23:02]
    These are plans that need to be manually specified to be installed.

*** DONE AutoDepends
    CLOSED: [2016-10-22 Sat 23:02]
    These plans are autogenerated based on what libraries the plan links to.

*** DONE BuildDepends
    CLOSED: [2016-10-22 Sat 23:03]
    These plans need to build installed during build time. But are not required
    for run time.
    These generally as a rule are runtimes, all development headers and libraries
    should be included in Plans if AutoDepends does not account for it.


* TODO Field expansion
  :PROPERTIES:
  :ARCHIVE_TIME: 2016-11-01 Tue 01:31
  :ARCHIVE_FILE: ~/gocode/src/github.com/mrosset/via/TODOs.org
  :ARCHIVE_OLPATH: /Features not implemented
  :ARCHIVE_CATEGORY: TODOs
  :ARCHIVE_TODO: TODO
  :ARCHIVE_ITAGS: devel
  :END:
  Allow referencing other field values from other fields
  # 
  Right now we have many fields that have there values hard coded. Example. Url
  almost always contains the version number for the source package. If we use
  templates we can deduce the Version from the Version field.

** Implementation details 
   Attached an Expand() method to structs we need to expand. When we
   call the expand method it takes the whole struct, encodes it to json then
   passes the struct through test/template excute. We then encode the expanded
   json into a new struct. For large plans this could be expensive so we only
   run this once, and then we cache the results to private field.

*** Example usage
    If we have a config struct that looks like this.
    #+BEGIN_EXAMPLE
    config.Print = "/usr/local/via"
    config.DB    = "{{.Prefix}}/db"
    #+END_EXAMPLE
    We can get the complete value of config.DB through the expand method
    #+BEGIN_EXAMPLE
    config.Expand().DB = "/usr/local/via/db"
    #+END_EXAMPLE

